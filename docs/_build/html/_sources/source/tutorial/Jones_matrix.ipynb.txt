{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "# Jones_matrix class\n",
    "\n",
    "Jones_matrix is a class that manages Jones matrices. It allows the user to create and manipulate them.\n",
    "\n",
    "## Creating an instance\n",
    "\n",
    "An instance must be created before starting to operate with the Jones matrix. The initialization accepts one argument: the name of the vector. This name will be used for printing:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from py_pol.jones_matrix import Jones_matrix, create_Jones_matrices\n",
    "from py_pol.mueller import Mueller\n",
    "from py_pol.utils import degrees\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "empty_polarizer is empty\n",
      "\n"
     ]
    }
   ],
   "source": [
    "J = Jones_matrix(\"empty_polarizer\")\n",
    "print(J)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Several Jones_matrix objects can be created at the same time using the function *create_Jones_matrices*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Element 1 is empty\n",
      " Element 2 is empty\n",
      "\n",
      "[J is empty\n",
      ", J is empty\n",
      ", J is empty\n",
      "]\n"
     ]
    }
   ],
   "source": [
    "J1, J2 = create_Jones_matrices(name=('Element 1', 'Element 2'))\n",
    "print(J1, J2)\n",
    "\n",
    "list_of_J = create_Jones_matrices(N=3)\n",
    "print(list_of_J)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Jones_matrix class fields\n",
    "\n",
    "Jones_matrix class objects have some fields where some methods and information is stored:\n",
    "\n",
    "* **M**: 2x2xN array containing all the Jones matrices.\n",
    "* **name**: Name of the object for print purposes.\n",
    "* **shape**: Shape desired for the outputs.\n",
    "* **size**: Number of stored Jones matrices.\n",
    "* **ndim**: Number of dimensions for representation purposes.\n",
    "* **no_rotation**: If True, rotation method do not act upon the object. Useful for objects that shouldn't be rotated as mirrors.\n",
    "* **_type**: Type of the object ('Jones_matrix'). This is used for determining the object class as using isinstance may throw unexpected results in .ipynb files.\n",
    "\n",
    "\n",
    "* **parameters**: Object of class *Parameters_Jones_matrix*.\n",
    "* **checks**: Object of class *Checks_Jones_matrix*.\n",
    "* **analysis**: Object of class *Analysis_Jones_matrix*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Array:  [[[1.00000000e+00+0.j 8.68198052e-01+0.j 5.50000000e-01+0.j\n",
      "   2.31801948e-01+0.j 1.00000000e-01+0.j]\n",
      "  [0.00000000e+00+0.j 3.18198052e-01+0.j 4.50000000e-01+0.j\n",
      "   3.18198052e-01+0.j 5.51091060e-17+0.j]]\n",
      "\n",
      " [[0.00000000e+00+0.j 3.18198052e-01+0.j 4.50000000e-01+0.j\n",
      "   3.18198052e-01+0.j 5.51091060e-17+0.j]\n",
      "  [1.00000000e-01+0.j 2.31801948e-01+0.j 5.50000000e-01+0.j\n",
      "   8.68198052e-01+0.j 1.00000000e+00+0.j]]]\n",
      "Name:  Linear diattenuator\n",
      "Shape:  [5]\n",
      "Size:  5\n",
      "Size:  1\n",
      "Type:  Jones_matrix \n",
      "\n",
      "Parameters (global phase): \n",
      " [0. 0. 0. 0. 0.] \n",
      "\n",
      "Checks (element is homogeneous): \n",
      " [ True  True  True  True  True] \n",
      "\n",
      "Analysis (as diattenuator): \n",
      " ([array([1., 1., 1., 1., 1.]), array([0.01, 0.01, 0.01, 0.01, 0.01]), array([1., 1., 1., 1., 1.]), array([0.1, 0.1, 0.1, 0.1, 0.1])], [array([0.        , 0.39269908, 0.78539816, 1.17809725, 1.57079633]), array([0., 0., 0., 0., 0.]), array([0.        , 0.39269908, 0.78539816, 1.17809725, 1.57079633]), array([0., 0., 0., 0., 0.])]) \n",
      "\n"
     ]
    }
   ],
   "source": [
    "J = Jones_matrix(\"Linear diattenuator\")\n",
    "angles = np.linspace(0, 90*degrees, 5)\n",
    "J.diattenuator_linear(p1=1, p2=0.1, azimuth=angles)\n",
    "\n",
    "print('Array: ', J.M)\n",
    "print('Name: ', J.name)\n",
    "print('Shape: ', J.shape)\n",
    "print('Size: ', J.size)\n",
    "print('Size: ', J.ndim)\n",
    "print('Type: ', J._type, '\\n')\n",
    "\n",
    "print('Parameters (global phase): \\n', J.parameters.global_phase(), '\\n')\n",
    "print('Checks (element is homogeneous): \\n', J.checks.is_homogeneous(), '\\n')\n",
    "print('Analysis (as diattenuator): \\n', J.analysis.diattenuator(), '\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That is, the output beam is linearly polarized in the direction of the linear polarized axis, and some light is absorbed by the polarized."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generating of optical elements\n",
    "\n",
    "As shown in the previous example, the Jones matrix is initialized with all elements equal to zero. There are many methods that can be used to generate a more desirable vector:\n",
    "\n",
    "* **from_components**: Creates a Jones_matrix object directly from the 4 elements (m00, m01, m10, m11).\n",
    "* **from_matrix**: Creates a Jones_matrix object directly from a 2x2 numpy arrays.\n",
    "* **from_list**: Creates a Jones_matrix object directly from a list of 2x2 numpy arrays.\n",
    "* **from_Mueller**: Takes a non-depolarizing Mueller Matrix and converts into Jones matrix.\n",
    "* **vacuum**:  Creates the matrix for vacuum.\n",
    "* **mirror**: Creates the matrix for a mirror. NOTE: Don't rotate this matrix.\n",
    "* **filter_amplifier**: Creates the matrix for a neutral filter or amplifier element\n",
    "* **diattenuator_perfect**: Creates a perfect linear diattenuator.\n",
    "* **diattenuator_linear**: Creates a real polarizer with perpendicular axes.\n",
    "* **diattenuator_retarder_linear**: Creates a linear diattenuator retarder with the same axes for diattenuation and retardance.\n",
    "* **diattenuator_charac_angles**: Creates the most general homogeneous diattenuator with orthogonal eigenstates from the characteristic angles of the main eigenstate.\n",
    "* **diattenuator_azimuth_ellipticity**: Creates the general homogeneous diattenuator with orthogonal eigenstates from the characteristic angles of the main eigenstate.\n",
    "* **quarter_waveplate**: Creates a quarter-waveplate.\n",
    "* **half_waveplate**: Creates a half-waveplate.\n",
    "* **retarder_linear**: Creates a retarder using delay.\n",
    "* **retarder_material**: Creates a retarder using physical properties of a anisotropic material.\n",
    "* **retarder_charac_angles**: Creates the most general homogenous retarder with orthogonal eigenstates from the characteristic angles of the main eigenstate.\n",
    "* **retarder_azimuth_ellipticity**: Creates the general homogeneous retarder with orthogonal eigenstates from the characteristic angles of the main eigenstate.\n",
    "\n",
    "For a more detailed description of each method, refer to the individual documentation of each one.\n",
    "\n",
    "Example: Linear polarizer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Polarizer @ 10.00 deg = \n",
      "[+0.970 +0.171]   \n",
      "[+0.171 +0.030]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "J = Jones_matrix(\"Polarizer\")\n",
    "J.diattenuator_perfect(azimuth=10*degrees)\n",
    "print(J)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The previous example only stores one Jones matrix. It is possible to store many Jones matrices in the same object. This is useful specially when the same operation is performed upon all of them, as rotation. In this way, it is not required to use for loops, reducing significantly the computation time.\n",
    "\n",
    "There are many ways of creating several Jones matrices in the same object. The first way is creating an object with several identical vectors. This is performed using the *length* argument of most of creation methods:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Polarizer = \n",
      "[+0.750 +0.433]   [+0.750 +0.433]   [+0.750 +0.433]   \n",
      "[+0.433 +0.250]   [+0.433 +0.250]   [+0.433 +0.250]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "J = Jones_matrix(\"Polarizer\")\n",
    "J.diattenuator_perfect(azimuth = 30*degrees, length = 3)\n",
    "print(J)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A second way of creating several Jones matrices at the same time is using an array as one of the parameters. Take into account that, if you use this option, all parameters must have the same number of elements or just one element. Otherwise, the program will throw an exception."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Polarizer = \n",
      "[+1.000 +0.000]   [+0.854 +0.354]   [+0.500 +0.500]   [+0.146 +0.354]   [+0.000 +0.000]   \n",
      "[+0.000 +0.000]   [+0.354 +0.146]   [+0.500 +0.500]   [+0.354 +0.854]   [+0.000 +1.000]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "J = Jones_matrix(\"Polarizer\")\n",
    "angles = np.linspace(0, 90*degrees, 5)\n",
    "J.diattenuator_perfect(azimuth = angles)\n",
    "print(J)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If the parameters have dimension higher than 1, the program will store that information in order to make prints and plots. In that case, the *print* function separates the four components Jones matrices:\n",
    "\n",
    "$$J=\\left[\\begin{array}{cc}\n",
    "J_{00} & J_{01}\\\\\n",
    "J_{10} & J_{11}\n",
    "\\end{array}\\right]$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Polarizer J00 = \n",
      "[[0.9146759 +0.j 0.01129533+0.j 0.76815199+0.j]\n",
      " [0.87160191+0.j 0.79111437+0.j 0.80802083+0.j]\n",
      " [0.02389002+0.j 0.99708157+0.j 0.8412461 +0.j]]\n",
      "Polarizer J01 = \n",
      "[[ 0.27936337+0.j -0.10567755+0.j  0.42201245+0.j]\n",
      " [ 0.33453254+0.j -0.40651251+0.j  0.39385679+0.j]\n",
      " [ 0.15270654+0.j  0.05394358+0.j  0.36544643+0.j]]\n",
      "Polarizer J10 = \n",
      "[[ 0.27936337+0.j -0.10567755+0.j  0.42201245+0.j]\n",
      " [ 0.33453254+0.j -0.40651251+0.j  0.39385679+0.j]\n",
      " [ 0.15270654+0.j  0.05394358+0.j  0.36544643+0.j]]\n",
      "Polarizer J11 = \n",
      "[[0.0853241 +0.j 0.98870467+0.j 0.23184801+0.j]\n",
      " [0.12839809+0.j 0.20888563+0.j 0.19197917+0.j]\n",
      " [0.97610998+0.j 0.00291843+0.j 0.1587539 +0.j]]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "J = Jones_matrix(\"Polarizer\")\n",
    "angles = np.random.rand(3,3) * 180*degrees\n",
    "J.diattenuator_perfect(azimuth = angles)\n",
    "print(J)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is possible to transform *Mueller* objects into *Jones_matrix* objects. Any depolarization properties are removed in the process."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "J = \n",
      "[+1.000 +0.000]   \n",
      "[+0.000 +0.000]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "M = Mueller().diattenuator_perfect(azimuth=0)\n",
    "J = Jones_matrix().from_Mueller(M)\n",
    "print(J)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Features of creation methods\n",
    "\n",
    "*py_pol* model sets the origin of phase in $J_{00}$. It means that the parameter *global_phase* of most creation methods and the methods *remove_global_phase* and *set_global_phase* (see below) will take it as the reference."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Polarizer @ 45.00 deg = \n",
      "[+0.000 +0.000]   \n",
      "[+0.000 +0.000]   \n",
      "\n",
      "Polarizer @ 45.00 deg = \n",
      "[+0.500 +0.500]   \n",
      "[+0.500 +0.500]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "J = Jones_matrix(\"Polarizer\")\n",
    "J.diattenuator_perfect(azimuth = 45*degrees, global_phase = 90*degrees)\n",
    "print(J)\n",
    "\n",
    "J.remove_global_phase()\n",
    "print(J)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Basic operations\n",
    "\n",
    "Some physical phenomena that affects polarization optical elements is described by simple operations performed to their Jones matrices.\n",
    "\n",
    "### Multiplication of a Jones matrix by a Jones vector\n",
    "\n",
    "When a light beam $E_1$ goes through a polarization optical element $J_1$, the polarization state of the output beam can be determined as: $E_2 = J_1 * E_1$. This can be implemented in *py_pol* as:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "J1 = \n",
      "[+1.000 +0.000]   \n",
      "[+0.000 +0.000]   \n",
      "\n",
      "E1 = \n",
      "[+0.707]   \n",
      "[+0.707]   \n",
      "\n",
      "J1 * E1 = \n",
      "[+0.707]   \n",
      "[+0.000]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "from py_pol.jones_vector import Jones_vector\n",
    "J1 = Jones_matrix(\"J1\")\n",
    "J1.diattenuator_perfect(azimuth=0*degrees)\n",
    "print(J1)\n",
    "\n",
    "E1 = Jones_vector(\"E1\")\n",
    "E1.linear_light(azimuth=45*degrees)\n",
    "print(E1)\n",
    "\n",
    "E2 = J1 * E1\n",
    "print(E2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Multiplication of 2 Jones matrices\n",
    "\n",
    "When two polarizing elementsare placed one after the other in the light path, first $J_1$ and then $J_2$, the system composed of both elements can be described by a single Jones matrix $J_3$, which is calculated as $J_3 = J_2 * J_1$.\n",
    "\n",
    "Example: Matrix representing a perfect linear polarized and a $\\lambda/4$ retarder."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Polarizer = \n",
      "[+1.000 +0.000]   \n",
      "[+0.000 +0.000]   \n",
      "\n",
      "Retarder @ 45.00 deg = \n",
      "[+0.500 +0.500]   \n",
      "[+0.500 +0.500]   \n",
      "\n",
      "Retarder @ 45.00 deg * Polarizer = \n",
      "[+0.500 +0.000]   \n",
      "[+0.500 +0.000]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "J1 = Jones_matrix(\"Polarizer\")\n",
    "J1.diattenuator_perfect()\n",
    "print(J1)\n",
    "\n",
    "J2 = Jones_matrix(\"Retarder\")\n",
    "J2.quarter_waveplate(azimuth=45*degrees)\n",
    "print(J2)\n",
    "\n",
    "J3 = J2 * J1\n",
    "print(J3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Multiplication by a constant\n",
    "\n",
    "The absorption and gain experienced by a light wave that goes through a polarization optical element can be increased or decreased by multiplying its Jones matrix by a real number."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Polarizer @ 30.00 deg = \n",
      "[+0.750 +0.433]   \n",
      "[+0.433 +0.250]   \n",
      "\n",
      "Polarizer @ 30.00 deg * 2 = \n",
      "[+1.500 +0.866]   \n",
      "[+0.866 +0.500]   \n",
      "\n",
      "Polarizer @ 30.00 deg / 2 = \n",
      "[+0.375 +0.217]   \n",
      "[+0.217 +0.125]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "J1 = Jones_matrix(\"Polarizer\")\n",
    "J1.diattenuator_perfect(azimuth=30*degrees)\n",
    "print(J1)\n",
    "\n",
    "J2 = 2 * J1\n",
    "print(J2)\n",
    "\n",
    "J2 = J1 / 2\n",
    "print(J2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The global phase change experienced by the light wave can also be changed by multiplying the Jones matrix of the element by a complex number."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Polarizer @ 30.00 deg = \n",
      "[+0.750 +0.433]   \n",
      "[+0.433 +0.250]   \n",
      "\n",
      "Polarizer @ 30.00 deg * 1j = \n",
      "[+0.000 +0.000]   \n",
      "[+0.000 +0.000]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "J1 = Jones_matrix(\"Polarizer\")\n",
    "J1.diattenuator_perfect(azimuth=30*degrees)\n",
    "print(J1)\n",
    "\n",
    "c = 1j\n",
    "J2 = c * J1\n",
    "print(J2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Addition of two Jones matrices\n",
    "\n",
    "The physical meaning of this operation is a little bit more complex. Imagine a light wave $E_0$ which goes through two spatially separated polarization optical elements $J_1$ and $J_2$. If the light waves are then coherently added, the behavior of the two elements can be described by a single Jones matrix $J_3 = J_1 + J_2$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Polarizer = \n",
      "[+1.000 +0.000]   \n",
      "[+0.000 +0.000]   \n",
      "\n",
      "Retarder @ 45.00 deg = \n",
      "[+0.500 +0.500]   \n",
      "[+0.500 +0.500]   \n",
      "\n",
      "Retarder @ 45.00 deg + Polarizer = \n",
      "[+1.500 +0.500]   \n",
      "[+0.500 +0.500]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "J1 = Jones_matrix(\"Polarizer\")\n",
    "J1.diattenuator_perfect()\n",
    "print(J1)\n",
    "J2 = Jones_matrix(\"Retarder\")\n",
    "J2.quarter_waveplate(azimuth=45*degrees)\n",
    "print(J2)\n",
    "\n",
    "J3 = J2 + J1\n",
    "print(J3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Equality\n",
    "\n",
    "It is possible to compare two *Jones_matrix* objects and tell if they are the same. It just compares the matrix components, not the rest of object fields."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Retarder 1 = \n",
      "[+1.000 +0.000]   \n",
      "[+0.000 +0.000]   \n",
      "\n",
      "Retarder 2 @ 0.01 deg = \n",
      "[+1.000 +0.000]   \n",
      "[+0.000 +0.000]   \n",
      "\n",
      "Comparison:  False\n"
     ]
    }
   ],
   "source": [
    "J1 = Jones_matrix(\"Retarder 1\")\n",
    "J1.quarter_waveplate(azimuth=0*degrees)\n",
    "print(J1)\n",
    "J2 = Jones_matrix(\"Retarder 2\")\n",
    "J2.quarter_waveplate(azimuth=0.01*degrees)\n",
    "print(J2)\n",
    "\n",
    "print('Comparison: ', E1==E2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Operations and multidimensionality\n",
    "\n",
    "The basic operations of *Jones_matrix* objects are subject to the same casting rules as numpy arrays. This means that they can be easily used even if one or both elements of the operation have more than one element.\n",
    "\n",
    "Here are some examples:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Polarizer = \n",
      "[+1.000 +0.000]   \n",
      "[+0.000 +0.000]   \n",
      "\n",
      "Retarder = \n",
      "[+1.000 +0.000]   [+0.750 +0.433]   [+0.250 +0.433]   [+0.000 +0.000]   \n",
      "[+0.000 +0.000]   [+0.433 +0.250]   [+0.433 +0.750]   [+0.000 +1.000]   \n",
      "\n",
      "Retarder * Polarizer = \n",
      "[+1.000 +0.000]   [+0.750 +0.000]   [+0.250 +0.000]   [+0.000 +0.000]   \n",
      "[+0.000 +0.000]   [+0.433 +0.000]   [+0.433 +0.000]   [+0.000 +0.000]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Multiplication of two Jones matrices\n",
    "J1 = Jones_matrix(\"Polarizer\")\n",
    "J1.diattenuator_perfect()\n",
    "print(J1)\n",
    "J2 = Jones_matrix(\"Retarder\")\n",
    "angles = np.linspace(0, 90*degrees, 4)\n",
    "J2.quarter_waveplate(azimuth=angles)\n",
    "print(J2)\n",
    "\n",
    "J3 = J2 * J1\n",
    "print(J3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Polarizer @ 30.00 deg = \n",
      "[+0.750 +0.433]   \n",
      "[+0.433 +0.250]   \n",
      "\n",
      "J = \n",
      "[+0.189 +0.109]   [+0.658 +0.380]   [+0.634 +0.366]   [+0.102 +0.059]   \n",
      "[+0.109 +0.063]   [+0.380 +0.219]   [+0.366 +0.211]   [+0.059 +0.034]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "J1 = Jones_matrix(\"Polarizer\")\n",
    "J1.diattenuator_perfect(azimuth=30*degrees)\n",
    "print(J1)\n",
    "\n",
    "c = 1j + np.random.rand(4)\n",
    "J2 = c * J1\n",
    "print(J2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Polarizer = \n",
      "[+1.000 +0.000]   [+0.750 +0.433]   [+0.250 +0.433]   [+0.000 +0.000]   \n",
      "[+0.000 +0.000]   [+0.433 +0.250]   [+0.433 +0.750]   [+0.000 +1.000]   \n",
      "\n",
      "Retarder = \n",
      "[+0.000 +0.000]   [+0.250 -0.433]   [+0.750 -0.433]   [+1.000 -0.000]   \n",
      "[+0.000 +1.000]   [-0.433 +0.750]   [-0.433 +0.250]   [-0.000 +0.000]   \n",
      "\n",
      "Retarder + Polarizer = \n",
      "[+1.000 +0.000]   [+1.000 +0.000]   [+1.000 -0.000]   [+1.000 -0.000]   \n",
      "[+0.000 +1.000]   [+0.000 +1.000]   [-0.000 +1.000]   [-0.000 +1.000]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "J1 = Jones_matrix(\"Polarizer\")\n",
    "angles = np.linspace(0, 90*degrees, 4)\n",
    "J1.diattenuator_perfect(azimuth=angles)\n",
    "print(J1)\n",
    "J2 = Jones_matrix(\"Retarder\")\n",
    "J2.quarter_waveplate(azimuth=90*degrees+angles)\n",
    "print(J2)\n",
    "\n",
    "J3 = J2 + J1\n",
    "print(J3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Jones matrix manipulation\n",
    "\n",
    "There are several operations that can be applied to a Jones matrix. Some of them are common to all py_pol objects and are inherited from their parent *Py_pol* class:\n",
    "\n",
    "* **clear**:  Removes data and name form Jones vector.\n",
    "* **copy**:  Creates a copy of the Jones_vector object.\n",
    "* **stretch**:  Stretches a Jones vector of size 1.\n",
    "* **shape_like**:  Takes the shape of another object to use as its own.\n",
    "* **reshape**: Changes the shape of the object.\n",
    "* **flatten**:  Transforms N-D objects into 1-D objects (0-D if only 1 element).\n",
    "* **flip**: Flips the object along some dimensions.\n",
    "* **get_list**: Creates a list with single elements.\n",
    "* **from_list**: Creates the object from a list of single elements.\n",
    "* **concatenate**: Canocatenates several objects into a single one.\n",
    "* **draw**: Draws the components of the object.\n",
    "* **clear**: Clears the information of the object.\n",
    "\n",
    "The rest of the manipulation methods are:\n",
    "\n",
    "* **rotate**: Rotates the Jones matrix.\n",
    "* **sum**: Calculates the summatory of the Jones matrices in the object.\n",
    "* **prod**: Calculates the product of the Jones matrices in the object.\n",
    "* **remove_global_phase**: Removes the phase introduced by the optical element (respect to J00).\n",
    "* **add_global_phase**: Increases the phase introduced by the optical element.\n",
    "* **set_global_phase**: Sets the phase introduced by the optical element.\n",
    "* **reciprocal**: The optical element is fliped so the light transverses it in the opposite direction.\n",
    "* **transpose**: Transposes the Jones matrix of the element.\n",
    "* **hermitan**: Calculates the hermitan matrix of the Jones matrix.\n",
    "* **inverse**: Calculates the inverse matrix of the Jones matrix.\n",
    "\n",
    "All the methods return a *Jones_matrix* object. For a more detailed description of each method, refer to the individual documentation of each one.\n",
    "\n",
    "Example: inverse."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Polarizer = \n",
      "[+1.000 +0.000]   \n",
      "[+0.000 +0.200]   \n",
      " \n",
      "\n",
      "Inverse of Polarizer = \n",
      "[+1.000 +0.000]   \n",
      "[+0.000 +5.000]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "J1 = Jones_matrix(\"Polarizer\")\n",
    "J1.diattenuator_linear(p1=1, p2=0.2)\n",
    "print(J1,'\\n')\n",
    "\n",
    "Inv = J1.inverse()\n",
    "print(Inv)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "All manipulation methods have the *keep* argument that specifies if the originial object must be preserved or transformed. If *keep* is True (default is False), a new object is created:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Polarizer = \n",
      "[+1.000 +0.000]   \n",
      "[+0.000 +0.200]   \n",
      " J2 = \n",
      "[+0.600 +0.400]   \n",
      "[+0.400 +0.600]   \n",
      "\n",
      "J2 = \n",
      "[+0.600 +0.400]   \n",
      "[+0.400 +0.600]   \n",
      " J2 = \n",
      "[+0.600 +0.400]   \n",
      "[+0.400 +0.600]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "J1 = Jones_matrix(\"Polarizer\")\n",
    "J1.diattenuator_linear(p1=1, p2=0.2)\n",
    "\n",
    "J2 = J1.rotate(angle=45*degrees, keep=True)\n",
    "J2.name = 'J2'\n",
    "print(J1, J2)\n",
    "\n",
    "J2 = J1.rotate(angle=45*degrees, keep=False)\n",
    "J2.name = 'J2'\n",
    "print(J1, J2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Jones_matrix* objects allow taking elements and changing them through indices like a *numpy.ndarray*.\n",
    "\n",
    "Examples:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original J00 = \n",
      "[[0.2427003 +0.j 0.83680528+0.j 0.49415743+0.j 0.3494361 +0.j\n",
      "  0.51691834+0.j]\n",
      " [0.74940353+0.j 0.15056623+0.j 0.88741593+0.j 0.17529797+0.j\n",
      "  0.45592376+0.j]\n",
      " [0.34251418+0.j 0.83540615+0.j 0.94662159+0.j 0.45095752+0.j\n",
      "  0.61134041+0.j]]\n",
      "Original J01 = \n",
      "[[0.18120135+0.j 0.47057596+0.j 0.34842914+0.j 0.74597368+0.j\n",
      "  0.4727434 +0.j]\n",
      " [0.74792405+0.j 0.0327115 +0.j 0.14106218+0.j 0.82525365+0.j\n",
      "  0.62216015+0.j]\n",
      " [0.13612136+0.j 0.92291119+0.j 0.41760627+0.j 0.6381236 +0.j\n",
      "  0.13419595+0.j]]\n",
      "Original J10 = \n",
      "[[0.69347798+0.j 0.13973507+0.j 0.83948509+0.j 0.92395274+0.j\n",
      "  0.48242732+0.j]\n",
      " [0.63991581+0.j 0.91578376+0.j 0.08508936+0.j 0.85635078+0.j\n",
      "  0.38343872+0.j]\n",
      " [0.5457108 +0.j 0.66463643+0.j 0.53205792+0.j 0.8104139 +0.j\n",
      "  0.02617972+0.j]]\n",
      "Original J11 = \n",
      "[[0.93627798+0.j 0.1214582 +0.j 0.90444555+0.j 0.54911483+0.j\n",
      "  0.4650621 +0.j]\n",
      " [0.85463828+0.j 0.23123486+0.j 0.09972302+0.j 0.62925417+0.j\n",
      "  0.04923351+0.j]\n",
      " [0.96474192+0.j 0.24052581+0.j 0.52204289+0.j 0.46353065+0.j\n",
      "  0.96966382+0.j]]\n",
      "\n",
      "Original_picked = \n",
      "[+0.243 +0.181]   [+0.837 +0.471]   [+0.494 +0.348]   \n",
      "[+0.693 +0.936]   [+0.140 +0.121]   [+0.839 +0.904]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "M = np.random.rand(2, 2, 3, 5)\n",
    "J = Jones_matrix('Original')\n",
    "J.from_matrix(M)\n",
    "print(J)\n",
    "\n",
    "J2 = J[0:3]\n",
    "print(J2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Polarizer = \n",
      "[+1.000 +0.000]   [+0.750 +0.433]   [+0.250 +0.433]   [+0.000 +0.000]   \n",
      "[+0.000 +0.000]   [+0.433 +0.250]   [+0.433 +0.750]   [+0.000 +1.000]   \n",
      "\n",
      "Retarder = \n",
      "[+1.000 +0.000]   \n",
      "[+0.000 +0.000]   \n",
      "\n",
      "Modified = \n",
      "[+1.000 +0.000]   [+0.750 +0.433]   [+1.000 +0.000]   [+0.000 +0.000]   \n",
      "[+0.000 +0.000]   [+0.433 +0.250]   [+0.000 +0.000]   [+0.000 +1.000]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "J1 = Jones_matrix(\"Polarizer\")\n",
    "angles = np.linspace(0, 90*degrees, 4)\n",
    "J1.diattenuator_perfect(azimuth=angles)\n",
    "print(J1)\n",
    "\n",
    "J2 = Jones_matrix(\"Retarder\")\n",
    "J2.quarter_waveplate()\n",
    "print(J2)\n",
    "\n",
    "J1[2] = J2\n",
    "J1.name = 'Modified'\n",
    "print(J1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Picking and setting\n",
    "\n",
    "*Py_pol* objects allow taking elements and changing them through indices like a *numpy.ndarray*.\n",
    "\n",
    "Examples:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original = \n",
      "[+0.088 +0.435]   [+0.992 +0.159]   [+0.236 +0.388]   [+0.616 +0.618]   [+0.663 +0.845]   \n",
      "[+0.967 +0.084]   [+0.079 +0.858]   [+0.830 +0.514]   [+0.409 +0.592]   [+0.863 +0.086]   \n",
      "\n",
      "Original_picked = \n",
      "[+0.992 +0.159]   [+0.236 +0.388]   \n",
      "[+0.079 +0.858]   [+0.830 +0.514]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "M = np.random.rand(2, 2, 5)\n",
    "J1 = Jones_matrix('Original')\n",
    "J1.from_matrix(M)\n",
    "print(J1)\n",
    "\n",
    "J2 = J1[1:3]\n",
    "print(J2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original J00 = \n",
      "[[1.         0.95677273 0.8345653  0.6545085 ]\n",
      " [0.44773577 0.25       0.0954915  0.0109262 ]\n",
      " [0.0109262  0.0954915  0.25       0.44773577]\n",
      " [0.6545085  0.8345653  0.95677273 1.        ]]\n",
      "Original J01 = \n",
      "[[ 0.00000000e+00  2.03368322e-01  3.71572413e-01  4.75528258e-01]\n",
      " [ 4.97260948e-01  4.33012702e-01  2.93892626e-01  1.03955845e-01]\n",
      " [-1.03955845e-01 -2.93892626e-01 -4.33012702e-01 -4.97260948e-01]\n",
      " [-4.75528258e-01 -3.71572413e-01 -2.03368322e-01 -1.22464680e-16]]\n",
      "Original J10 = \n",
      "[[ 0.00000000e+00  2.03368322e-01  3.71572413e-01  4.75528258e-01]\n",
      " [ 4.97260948e-01  4.33012702e-01  2.93892626e-01  1.03955845e-01]\n",
      " [-1.03955845e-01 -2.93892626e-01 -4.33012702e-01 -4.97260948e-01]\n",
      " [-4.75528258e-01 -3.71572413e-01 -2.03368322e-01 -1.22464680e-16]]\n",
      "Original J11 = \n",
      "[[0.00000000e+00 4.32272712e-02 1.65434697e-01 3.45491503e-01]\n",
      " [5.52264232e-01 7.50000000e-01 9.04508497e-01 9.89073800e-01]\n",
      " [9.89073800e-01 9.04508497e-01 7.50000000e-01 5.52264232e-01]\n",
      " [3.45491503e-01 1.65434697e-01 4.32272712e-02 1.49975978e-32]]\n",
      "\n",
      "Original_picked J00 = \n",
      "[[0.0954915  0.0109262 ]\n",
      " [0.25       0.44773577]]\n",
      "Original_picked J01 = \n",
      "[[ 0.29389263  0.10395585]\n",
      " [-0.4330127  -0.49726095]]\n",
      "Original_picked J10 = \n",
      "[[ 0.29389263  0.10395585]\n",
      " [-0.4330127  -0.49726095]]\n",
      "Original_picked J11 = \n",
      "[[0.9045085  0.9890738 ]\n",
      " [0.75       0.55226423]]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "J1 = Jones_matrix('Original')\n",
    "angles = np.linspace(0,180*degrees, 16)\n",
    "J1.diattenuator_linear(azimuth=angles, shape=[4,4])\n",
    "print(J1)\n",
    "\n",
    "J2 = J1[1:3,2:4]\n",
    "print(J2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Iterating\n",
    "\n",
    "*Py_pol* objects are iterable. When introduced in a for loop, a new object picking in the first dimension is returned."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "J_picked = \n",
      "[+1.000 +0.000]   \n",
      "[+0.000 +0.000]   \n",
      "\n",
      "J_picked = \n",
      "[+0.500 +0.500]   \n",
      "[+0.500 +0.500]   \n",
      "\n",
      "J_picked = \n",
      "[+0.000 +0.000]   \n",
      "[+0.000 +1.000]   \n",
      "\n",
      "J_picked = \n",
      "[+0.500 -0.500]   \n",
      "[-0.500 +0.500]   \n",
      "\n",
      "J_picked = \n",
      "[+1.000 -0.000]   \n",
      "[-0.000 +0.000]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "angles = np.linspace(0, 180*degrees, 5)\n",
    "Jtotal = Jones_matrix().diattenuator_linear(azimuth=angles)\n",
    "for J in Jtotal:\n",
    "    print(J)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Parameters of Jones_matrix\n",
    "\n",
    "Several parameters can be measured from a Jones matrix. They are implemented in the independent class *Parameters_Jones_Matrix*, which is stored in the *parameters* field of *Jones_matrix* class.\n",
    "\n",
    "* **matrix**:  Gets a numpy array with all the matrices.\n",
    "* **components**: Extracts the four components of the Jones matrix.\n",
    "* **inhomogeneity**: Calculates the inhomogeneity parameter.\n",
    "* **diattenuation / polarizance**:   Calculates the diattenuation of the matrix.\n",
    "* **retardance**: Calculates the retardance (or delay) introduced between the fast and slow axes.\n",
    "* **global_phase**: Calculates the phase introduced by the optical element (respect to J00).\n",
    "* **transmissions**: Calculates the maximum and minimum field and/or intensity transmissions.\n",
    "* **mean_transmission**: Calculates the mean intensity transmission.\n",
    "* **eig**: Calculates the eigenvalues and eigenstates (eigenvectors) of the Jones matrices.\n",
    "* **eigenvalues**: Calculates the eigenvalues and of the Jones matrices.\n",
    "* **eigenstates**: Calculates the eigenstates (eigenvectors) of the Jones matrices.\n",
    "* **det**: Calculates the determinant and of the Jones matrices.\n",
    "* **trace**: Calculates the trace of the Jones matrices.\n",
    "* **norm**: Calculates the norm of the Jones matrices.\n",
    "\n",
    "\n",
    "* **get_all**: Returns a dictionary with all the parameters of the object.\n",
    "\n",
    "For a more detailed description of each method, refer to the individual documentation of each one.\n",
    "\n",
    "Example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Retardance = 90.0º\n"
     ]
    }
   ],
   "source": [
    "J = Jones_matrix(\"Diattenuator retarder\")\n",
    "J.diattenuator_retarder_linear(R=90*degrees, p1=1, p2=0.5, azimuth=30*degrees)\n",
    "R = J.parameters.retardance()\n",
    "print(\"Retardance = {:2.1f}º\".format(R/degrees))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When several Jones matrices are stored in the object, setting *verbose* argument to *True* makes the method print the values in screen. Also, 1D or 2D figures can be shown if the *draw* argument is set to *True*::"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The retardance of Diattenuator retarder is (deg.):\n",
      "[  0.  15.  30.  45.  60.  75.  90. 105. 120. 135. 150. 165. 180.]\n",
      "The mean value is 90.0 +- 56.12486080160913\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "J = Jones_matrix(\"Diattenuator retarder\")\n",
    "R = np.linspace(0, 180*degrees, 13)\n",
    "J.diattenuator_retarder_linear(R=R, p1=1, p2=0.5, azimuth=30*degrees)\n",
    "R = J.parameters.retardance(verbose=True, draw=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The field transmissions of Diattenuator are:\n",
      "The mean value of param Maximum (int.) is 0.7500000000003215 +- 0.14546964399033177\n",
      "The mean value of param Minimum (int.) is 0.24999999999967848 +- 0.14546964399033177\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x360 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "J = Jones_matrix(\"Diattenuator\")\n",
    "p1 = np.linspace(0.5, 1, 128)\n",
    "p2 = np.linspace(0, 0.5, 128)\n",
    "P1, P2 = np.meshgrid(p1, p2)\n",
    "J.diattenuator_linear(p1=P1, p2=P2, azimuth=30*degrees)\n",
    "P1, P2 = J.parameters.transmissions(kind='field', draw=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There is a function in *Parameters_Jones_Matrix* class, **.get_all()** that computes all the parameters available and stores in a dictionary **.dict_params()**. This function is called when using print upon the *Parameters_Jones_Matrix* class.\n",
    "\n",
    "Example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Diattenuator retarder @ 30.00 deg = \n",
      "[+0.750 +0.433]   \n",
      "[+0.433 +0.250]   \n",
      " \n",
      "\n",
      "The matrix components of Diattenuator retarder @ 30.00 deg are:\n",
      "  J00\n",
      "(0.7500000000000001+0.12499999999999997j)\n",
      "  J01\n",
      "(0.4330127018922193-0.21650635094610965j)\n",
      "  J10\n",
      "(0.4330127018922193-0.21650635094610965j)\n",
      "  J11\n",
      "(0.24999999999999997+0.37500000000000006j)\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The diattenuation of Diattenuator retarder @ 30.00 deg is:\n",
      "[0.6]\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The retardance of Diattenuator retarder @ 30.00 deg is (deg.):\n",
      "90.00000000000001\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The global phase of Diattenuator retarder @ 30.00 deg is (deg.):\n",
      "9.462322208025613\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The inhomogeneity parameter of Diattenuator retarder @ 30.00 deg is:\n",
      "8.881784197001253e-17\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The intensity transmissions of Diattenuator retarder @ 30.00 deg are:\n",
      "  Maximum (int.)\n",
      "1.0000000000000002\n",
      "  Minimum (int.)\n",
      "0.24999999999999994\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The field transmissions of Diattenuator retarder @ 30.00 deg are:\n",
      "  Maximum (int.)\n",
      "1.0\n",
      "  Minimum (int.)\n",
      "0.49999999999999994\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The mean transmission of Diattenuator retarder @ 30.00 deg is:\n",
      "0.3750000000000001\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The determinant of Diattenuator retarder @ 30.00 deg is:\n",
      "(2.775557561562892e-17+0.5j)\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The trace of Diattenuator retarder @ 30.00 deg is:\n",
      "(1+0.5j)\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The norm of Diattenuator retarder @ 30.00 deg is:\n",
      "1.118033988749895\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The eigenvalues of Diattenuator retarder @ 30.00 deg are:\n",
      "  v1\n",
      "[1.-5.55111512e-17j]\n",
      "  v2\n",
      "[-5.55111512e-17+0.5j]\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The eigenvectors of Diattenuator retarder @ 30.00 deg are:\n",
      "  e1x\n",
      "[0.8660254+0.j]\n",
      "  e1y\n",
      "[0.5+0.j]\n",
      "  e2x\n",
      "[-0.5+5.55111512e-17j]\n",
      "  e2y\n",
      "[0.8660254+0.j]\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "J = Jones_matrix(\"Diattenuator retarder\")\n",
    "J.diattenuator_retarder_linear(R=90*degrees, p1=1, p2=0.5, azimuth=30*degrees)\n",
    "print(J,'\\n')      \n",
    "print(J.parameters)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Checks of Jones_matrix\n",
    "\n",
    "There are several checks that can be performed upon a Jones vector. They are implemented in the independent class *Checks_Jones_matrix*, which is stored in the *checks* field of *Jones_matrix* class.\n",
    "\n",
    "* **is_phisycall**: Check if the Jones matrices correspond to physically realizable optical elements.\n",
    "* **is_homogeneous**: Determines if the matrices correspond to homogeneous optical elements.\n",
    "* **is_retarder**: Checks if the Jones matrices correspond to homogeneous retarders.\n",
    "* **is_diattenuator / is_polarizer**: Checks if the Jones matrices correspond to homogeneous diattenuators.\n",
    "* **is_symmetric**: Checks if the Jones matrices are symmetric.\n",
    "* **is_conjugate_symmetric**: Checks if the Jones matrices are conjugate symmetric.\n",
    "* **is_eigenstate**: Checks if a given light state is an eigenstate of the objct.\n",
    "\n",
    "\n",
    "\n",
    "* **get_all**: Returns a dictionary with all the checks of the object.\n",
    "\n",
    "For a more detailed description of each method, refer to the individual documentation of each one.\n",
    "\n",
    "Example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Diattenuator retarder @ 30.00 deg is an homogeneous retarder:\n",
      "False\n",
      "\n"
     ]
    }
   ],
   "source": [
    "J = Jones_matrix(\"Diattenuator retarder\")\n",
    "J.diattenuator_retarder_linear(R=90*degrees, p1=1, p2=0.5, azimuth=30*degrees)\n",
    "cond = J.checks.is_retarder(verbose=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As with the *Parameters_Jones_matrix* class, 1D and 2D plot draws are also implemented for this class. Also, the *print* function calls to *get_all*:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Diattenuator retarder is an homogeneous diattenuator:\n",
      "The mean value is 0.1 +- 0.30000000000000004\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "R = np.random.rand(20) * 180*degrees\n",
    "R[R < 50*degrees] = 0 # In some cases, the diattenuator retarder is reduced to a pure diattenuator\n",
    "\n",
    "J = Jones_matrix(\"Diattenuator retarder\")\n",
    "J.diattenuator_retarder_linear(R=R, p1=1, p2=0.5, azimuth=30*degrees)\n",
    "cond = J.checks.is_diattenuator(draw=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Analysis of Jones_matrix\n",
    "\n",
    "There are several analysis that can be performed upon a Jones vector. They are implemented in the independent class *Analysis_Jones_matrix*, which is stored in the *analysis* field of *Jones_matrix* class.\n",
    "\n",
    "* **decompose_pure**: Decomposes the Jones matrices in two: an homogeneous retarder and diattenuator.\n",
    "* **diattenuator / polarizer**: Analyzes the Jones matrices as if they were diattenuators.\n",
    "* **retarder**: Analyzes the Jones matrices as if they were retarders.\n",
    "\n",
    "\n",
    "* **get_all**: Returns a dictionary with all the analysis information of the object.\n",
    "\n",
    "Note: Some methods are still to be finished.\n",
    "\n",
    "For a more detailed description of each method, refer to the individual documentation of each one.\n",
    "\n",
    "Example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Diattenuator = \n",
      "[+0.436 +0.022]   \n",
      "[+0.022 +0.437]   \n",
      "\n",
      "Retarder = \n",
      "[+0.898 -0.439]   \n",
      "[+0.303 +0.662]   \n",
      "\n",
      "Product Diattenuator = \n",
      "[+0.436 +0.022]   \n",
      "[+0.022 +0.437]   \n",
      " Product Retarder = \n",
      "[+0.898 -0.439]   \n",
      "[+0.303 +0.662]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Create a random diattenuator\n",
    "p1, p2 = np.random.rand(2)\n",
    "alpha, delta = np.random.rand(2) * 90*degrees\n",
    "delta = delta*4\n",
    "Jd = Jones_matrix(\"Diattenuator\")\n",
    "Jd.diattenuator_charac_angles(p1=p1, p2=p2, alpha=alpha, delay=delta)\n",
    "print(Jd)\n",
    "# Create a random retarder\n",
    "R, alpha, delta = np.random.rand(3) * 90*degrees\n",
    "(R, delta) = (R*2, delta*4)\n",
    "Jr = Jones_matrix(\"Retarder\")\n",
    "Jr.retarder_charac_angles(R=R, alpha=alpha, delay=delta)\n",
    "print(Jr)\n",
    "\n",
    "# Multiply them and try to decompose\n",
    "J = Jr * Jd\n",
    "J.name = 'Product'\n",
    "Jr2, Jd2 = J.analysis.decompose_pure(decomposition='RD')\n",
    "print(Jd2, Jr2)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
