{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Mueller class\n",
    "\n",
    "Mueller is a class that manages Mueller 4x4 polarization matrix. It allows the user to create and manipulate them. The difference between Mueller and Jones formalisms is that Mueller matrices can depolarize light, while Jones matrices can affect to the global phase of the electric field. However, Mueller objects store the global phase (if any) and use it when it is relevant.\n",
    "\n",
    "## Creating an instance\n",
    "\n",
    "An instance must be created before starting to operate with the Mueller matrix. The initialization accepts one argument: the name of the vector. This name will be used for printing:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Object 1 is empty\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from py_pol.mueller import Mueller, create_Mueller, degrees\n",
    "from py_pol.stokes import Stokes\n",
    "import numpy as np\n",
    "\n",
    "M1 = Mueller(\"Object 1\")\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Several Mueller objects can be created at the same time using the function *create_Mueller*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Object 2 is empty\n",
      " Object 3 is empty\n",
      "\n",
      "[M is empty\n",
      ", M is empty\n",
      ", M is empty\n",
      "]\n"
     ]
    }
   ],
   "source": [
    "M2, M3 = create_Mueller(name=('Object 2', 'Object 3'))\n",
    "print(M2, M3)\n",
    "\n",
    "list_of_M = create_Mueller(N=3)\n",
    "print(list_of_M)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Mueller class fields\n",
    "\n",
    "Mueller class objects have some fields where some methods and information is stored:\n",
    "* **M**: 4x4xN array containing all the Mueller matrices.\n",
    "* **name**: Name of the object for print purposes.\n",
    "* **shape**: Shape desired for the outputs.\n",
    "* **size**: Number of stored Mueller matrices.\n",
    "* **ndim**: Number of dimensions for representation purposes.\n",
    "* **no_rotation**: If True, rotation method do not act upon the object. Useful for objects that shouldn't be rotated as mirrors.\n",
    "* **_type**: Type of the object ('Mueller'). This is used for determining the object class as using isinstance may throw unexpected results in .ipynb files.\n",
    "\n",
    "\n",
    "* **parameters**: parameters of the Mueller matrices.\n",
    "* **checks**: checks of the Mueller matrices.\n",
    "* **analysis**: analysis of the Mueller matrices."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[0.5]\n",
      "  [0.5]\n",
      "  [0. ]\n",
      "  [0. ]]\n",
      "\n",
      " [[0.5]\n",
      "  [0.5]\n",
      "  [0. ]\n",
      "  [0. ]]\n",
      "\n",
      " [[0. ]\n",
      "  [0. ]\n",
      "  [0. ]\n",
      "  [0. ]]\n",
      "\n",
      " [[0. ]\n",
      "  [0. ]\n",
      "  [0. ]\n",
      "  [0. ]]]\n"
     ]
    }
   ],
   "source": [
    "M1 = Mueller(\"diattenuator_linear\")\n",
    "M1.diattenuator_linear(p1=1, p2=0, azimuth=0*degrees)\n",
    "print(M1.M)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generating polarization devices\n",
    "\n",
    "As shown in the previous example, the Mueller matrix is initialized with all elements equal to zero. There are many methods that can be used to generate a more desirable vector:\n",
    "\n",
    "* **from_components**: Creates a Mueller matrix directly from the 16 $M_{ij}$ elements.\n",
    "* **from_matrix**: Creates a Mueller object directly from a 4x4xN matrix.\n",
    "* **from_normalized**: Creates a Mueller matrix directly from a normalized 4x4 matrix ($M_{norm} = M/M_{00}$).\n",
    "* **from_Jones**: Creates a Mueller Matrix equivalent to a Jones matrix.\n",
    "* **from_blocks**: Creates a Mueller matrix from the blocks of its decomposition.\n",
    "* **from_covariance**: Creates a Mueller matrix from the equivalent covariant matrix.\n",
    "* **from_inverse**: Creates a Mueller matrix from the inverse matrix.\n",
    "* **from_list**: Creates a Jones_matrix object directly from a list of 4x4 numpy arrays.\n",
    "* **vacuum**: Creates the matrix for vacuum.\n",
    "* **mirror**: Creates the matrix for a mirror. NOTE: This matrix mus not be rotated.\n",
    "* **filter_amplifier**: Creates the matrix for a neutral filter or amplifier element.\n",
    "* **depolarizer_perfect**: Creates a perfect depolarizer.\n",
    "* **depolarizer_diagonal**: Creates a depolarizer with elements just in the diagonal.\n",
    "* **depolarizer_states**: Creates a general depolarizer from the diattenuation, polarizance and eigenstate vectors.\n",
    "* **diattenuator_perfect**: Creates a perfect linear polarizer.\n",
    "* **diattenuator_linear**: Creates a real diattenuator with perpendicular axes.\n",
    "* **diattenuator_charac_angles**: Creates the most general homogeneous diattenuator with orthogonal eigenstates from the characteristic angles of the main eigenstate.\n",
    "* **diattenuator_azimuth_ellipticity**: Creates the most general homogenous diattenuator from the characteristic angles of the main eigenstate.\n",
    "* **diattenuator_vector**: Creates the most general homogenous diattenuator from the diattenuation vector.\n",
    "* **quarter_waveplate**: Creates a perfect retarder with 90ยบ retardance.\n",
    "* **half_waveplate**: Creates a perfect retarder with 180ยบ retardance.\n",
    "* **retarder_linear**: Creates a linear retarder.\n",
    "* **retarder_charac_angles**: Creates the most general homogeneous retarder from the characteristic angles of the fast eigenstate.\n",
    "* **retarder_azimuth_ellipticity**: Creates the most general homogeneous retarder from the characteristic angles of the fast eigenstate.\n",
    "* **retarder_from_vector**: Creates the most general homogeneous retarder from the retardance vector.\n",
    "* **diattenuator_retarder_linear**: Creates an homogeneous linear diattenuator retarder with the same axes for diattenuation and retardance.\n",
    "* **diattenuator_retarder_azimuth_ellipticity**: Creates the most general homogeneous diattenuator retarder with the same axes for diattenuation and retardance from the azimuth and ellipticity angle.\n",
    "* **diattenuator_retarder_charac_angles**: Creates the most general homogeneous diattenuator retarder with the same axes for diattenuation and retardance from the characteristic angles.\n",
    "* **general_eigenstates**: Generates the most general pure optical element from its eigenstates.\n",
    "\n",
    "For a more detailed description of each method, refer to the individual documentation of each one.\n",
    "\n",
    "Example: Linear diattenuator."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear diattenuator = \n",
      "[+0.500 +0.500 +0.000 +0.000]   \n",
      "[+0.500 +0.500 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1 = Mueller(\"Linear diattenuator\")\n",
    "M1.diattenuator_linear(p1=1, p2=0, azimuth=0*degrees)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The previous example only stores one Mueller matrix. However, it is possible to store many Mueller matrices in the same object. This is useful specially when the same operation is performed upon all of them, as rotation. In this way, it is not required to use for loops, reducing significantly the computation time.\n",
    "\n",
    "There are many ways of creating several Mueller matrices in the same object. The first way is creating an object with several identical matrices. This is performed using the *length* argument present in most creation methods:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear diattenuator = \n",
      "[+0.500 +0.500 +0.000 +0.000]   [+0.500 +0.500 +0.000 +0.000]   [+0.500 +0.500 +0.000 +0.000]   [+0.500 +0.500 +0.000 +0.000]   [+0.500 +0.500 +0.000 +0.000]   \n",
      "[+0.500 +0.500 +0.000 +0.000]   [+0.500 +0.500 +0.000 +0.000]   [+0.500 +0.500 +0.000 +0.000]   [+0.500 +0.500 +0.000 +0.000]   [+0.500 +0.500 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   [+0.000 +0.000 +0.000 +0.000]   [+0.000 +0.000 +0.000 +0.000]   [+0.000 +0.000 +0.000 +0.000]   [+0.000 +0.000 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   [+0.000 +0.000 +0.000 +0.000]   [+0.000 +0.000 +0.000 +0.000]   [+0.000 +0.000 +0.000 +0.000]   [+0.000 +0.000 +0.000 +0.000]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1 = Mueller(\"Linear diattenuator\")\n",
    "M1.diattenuator_linear(p1=1, p2=0, azimuth=0*degrees, length=5)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A second way of creating several matrices at the same time is using an array as one (or more) of the parameters of the creation methods. Take into account that, if you use this option, all parameters must have the same number of elements or just one element. Otherwise, the program will throw an exception."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear diattenuator = \n",
      "[+0.500 +0.500 +0.000 +0.000]   [+0.500 +0.354 +0.354 +0.000]   [+0.500 +0.000 +0.500 +0.000]   [+0.500 -0.354 +0.354 +0.000]   [+0.500 -0.500 +0.000 +0.000]   \n",
      "[+0.500 +0.500 +0.000 +0.000]   [+0.354 +0.250 +0.250 +0.000]   [+0.000 +0.000 +0.000 +0.000]   [-0.354 +0.250 -0.250 +0.000]   [-0.500 +0.500 -0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   [+0.354 +0.250 +0.250 +0.000]   [+0.500 +0.000 +0.500 +0.000]   [+0.354 -0.250 +0.250 +0.000]   [+0.000 -0.000 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   [+0.000 +0.000 +0.000 +0.000]   [+0.000 +0.000 +0.000 +0.000]   [+0.000 +0.000 +0.000 +0.000]   [+0.000 +0.000 +0.000 +0.000]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "angles = np.linspace(0, 90*degrees, 5)\n",
    "\n",
    "M1 = Mueller(\"Linear diattenuator\")\n",
    "M1.diattenuator_linear(p1=1, p2=0, azimuth=angles)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If the parameters have dimension higher than 1, the program will store that information in order to make prints and plots. In that case, the *print* function separates the two components Jones vectors:\n",
    "\n",
    "$$M=\\left[\\begin{array}{cccc}\n",
    "M_{00} & M_{01} & M_{02} & M_{03}\\\\\n",
    "M_{10} & M_{11} & M_{12} & M_{13}\\\\\n",
    "M_{20} & M_{21} & M_{22} & M_{23}\\\\\n",
    "M_{30} & M_{31} & M_{32} & M_{33}\n",
    "\\end{array}\\right]$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear diattenuator M00 =\n",
      " [[0.5 0.5 0.5]\n",
      " [0.5 0.5 0.5]\n",
      " [0.5 0.5 0.5]]\n",
      "Linear diattenuator M01 =\n",
      " [[ 0.49093872  0.2434864   0.17126904]\n",
      " [-0.49860007 -0.42803649  0.03718286]\n",
      " [ 0.47353327 -0.12357952 -0.15105564]]\n",
      "Linear diattenuator M02 =\n",
      " [[ 0.09475852  0.43670857  0.46975197]\n",
      " [-0.03738946 -0.25842749  0.49861552]\n",
      " [ 0.16051867 -0.48448746 -0.47663633]]\n",
      "Linear diattenuator M03 =\n",
      " [[0. 0. 0.]\n",
      " [0. 0. 0.]\n",
      " [0. 0. 0.]]\n",
      "Linear diattenuator M10 =\n",
      " [[ 0.49093872  0.2434864   0.17126904]\n",
      " [-0.49860007 -0.42803649  0.03718286]\n",
      " [ 0.47353327 -0.12357952 -0.15105564]]\n",
      "Linear diattenuator M11 =\n",
      " [[0.48204165 0.11857126 0.05866617]\n",
      " [0.49720406 0.36643047 0.00276513]\n",
      " [0.44846751 0.0305438  0.04563561]]\n",
      "Linear diattenuator M12 =\n",
      " [[0.09304125 0.21266519 0.16090794]\n",
      " [0.03728477 0.22123279 0.0370799 ]\n",
      " [0.15202187 0.11974546 0.14399721]]\n",
      "Linear diattenuator M13 =\n",
      " [[0. 0. 0.]\n",
      " [0. 0. 0.]\n",
      " [0. 0. 0.]]\n",
      "Linear diattenuator M20 =\n",
      " [[ 0.09475852  0.43670857  0.46975197]\n",
      " [-0.03738946 -0.25842749  0.49861552]\n",
      " [ 0.16051867 -0.48448746 -0.47663633]]\n",
      "Linear diattenuator M21 =\n",
      " [[0.09304125 0.21266519 0.16090794]\n",
      " [0.03728477 0.22123279 0.0370799 ]\n",
      " [0.15202187 0.11974546 0.14399721]]\n",
      "Linear diattenuator M22 =\n",
      " [[0.01795835 0.38142874 0.44133383]\n",
      " [0.00279594 0.13356953 0.49723487]\n",
      " [0.05153249 0.4694562  0.45436439]]\n",
      "Linear diattenuator M23 =\n",
      " [[0. 0. 0.]\n",
      " [0. 0. 0.]\n",
      " [0. 0. 0.]]\n",
      "Linear diattenuator M30 =\n",
      " [[0. 0. 0.]\n",
      " [0. 0. 0.]\n",
      " [0. 0. 0.]]\n",
      "Linear diattenuator M31 =\n",
      " [[0. 0. 0.]\n",
      " [0. 0. 0.]\n",
      " [0. 0. 0.]]\n",
      "Linear diattenuator M32 =\n",
      " [[0. 0. 0.]\n",
      " [0. 0. 0.]\n",
      " [0. 0. 0.]]\n",
      "Linear diattenuator M33 =\n",
      " [[0. 0. 0.]\n",
      " [0. 0. 0.]\n",
      " [0. 0. 0.]]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "angles = np.random.rand(3,3) * 180*degrees\n",
    "\n",
    "M1 = Mueller(\"Linear diattenuator\")\n",
    "M1.diattenuator_linear(p1=1, p2=0, azimuth=angles)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Features of creation methods\n",
    "\n",
    "Mueller formalism does not take into account the global phase of the light states. However, *Mueller* objects store the phase they add to light in the *global_phase* field. Use *None* if the global phase is unknown.\n",
    "\n",
    "Most creation methods accept a *global_phase* argument that can be used to introduce it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.]\n",
      "0.0\n"
     ]
    }
   ],
   "source": [
    "M1 = Mueller(\"Linear diattenuator\")\n",
    "M1.diattenuator_linear(p1=1, p2=0, azimuth=0*degrees, global_phase=90*degrees)\n",
    "print(M1.global_phase / degrees)\n",
    "\n",
    "M1.remove_global_phase()\n",
    "print(M1.global_phase / degrees)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Some creation methods accept a *p1* and *p2* or a *Tmax* and *Tmin* parameters in order to set the electric field or intensity maximum and minimum transmissions respectively. If both sets of parameters are given together to the method, it will use the intensity transmissions, ignoring the field transmissions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Diattenuator 1 = \n",
      "[+0.500 +0.500 +0.000 +0.000]   \n",
      "[+0.500 +0.500 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "\n",
      "Diattenuator 2 = \n",
      "[+0.500 +0.300 +0.000 +0.000]   \n",
      "[+0.300 +0.500 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.400 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.400]   \n",
      "\n",
      "Diattenuator 3 = \n",
      "[+0.500 +0.300 +0.000 +0.000]   \n",
      "[+0.300 +0.500 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.400 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.400]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1 = Mueller(\"Diattenuator 1\")\n",
    "M1.diattenuator_linear(p1=1, p2=0, azimuth=0*degrees)\n",
    "print(M1)\n",
    "\n",
    "M1 = Mueller(\"Diattenuator 2\")\n",
    "M1.diattenuator_linear(Tmax=0.8, Tmin=0.2, azimuth=0*degrees)\n",
    "print(M1)\n",
    "\n",
    "M1 = Mueller(\"Diattenuator 3\")\n",
    "M1.diattenuator_linear(p1=1, p2=0, Tmax=0.8, Tmin=0.2, azimuth=0*degrees)\n",
    "print(M1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Basic operations\n",
    "\n",
    "Some physical phenomena that affects optical objects are described by simple operations performed to their Mueller matrices.\n",
    "\n",
    "### Addition of two Mueller matrices\n",
    "\n",
    "If a light state gets through two (or more) optical objects in paralel (i.e., two halves of the light source gets twhrough two different optical elements), this phenomenom is represented by the sum of their Mueller matrices. If both of them have the same global phase, it is maintained. If not, it is changed to None (unknown).\n",
    "\n",
    "Take into notice that the sum of two physically realizable Mueller matrices is not necessary a physically realizable Mueller matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Diattenuator 1 + Diattenuator 2 = \n",
      "[+1.000 +0.800 +0.000 +0.000]   \n",
      "[+0.800 +1.000 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.400 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.400]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1 = Mueller(\"Diattenuator 1\")\n",
    "M1.diattenuator_linear(p1=1, p2=0, azimuth=0*degrees)\n",
    "M2 = Mueller(\"Diattenuator 2\")\n",
    "M2.diattenuator_linear(Tmax=0.8, Tmin=0.2, azimuth=0*degrees)\n",
    "print(M1+M2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Multiply by a constant\n",
    "\n",
    "A change in the absorption or gain of an optical object is represented by multiplying it by a constant. Take into account that Mueller formalism describes intensity transmissions, so the constant represents a variation in Intensity absorption or gain."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 * Diattenuator 1 = \n",
      "[+1.000 +1.000 +0.000 +0.000]   \n",
      "[+1.000 +1.000 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "\n",
      "3 * Diattenuator 1 = \n",
      "[+1.500 +1.500 +0.000 +0.000]   \n",
      "[+1.500 +1.500 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "\n",
      "Diattenuator 1 / 2 = \n",
      "[+0.250 +0.250 +0.000 +0.000]   \n",
      "[+0.250 +0.250 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1 = Mueller(\"Diattenuator 1\")\n",
    "M1.diattenuator_linear(p1=1, p2=0, azimuth=0*degrees)\n",
    "print(2 * M1)\n",
    "\n",
    "print(M1*3)\n",
    "\n",
    "print(M1/2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If the constant is complex, the constant phase will be added to the global phase of the light, while its absolute value will increase or decrease the light intensity. \n",
    "\n",
    "Take into account that real negative values are a special case of complex numbers whose phase is 180ยบ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2j * Diattenuator 1 = \n",
      "[+1.000 +1.000 +0.000 +0.000]   \n",
      "[+1.000 +1.000 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      " [90.]\n",
      "-1 * Diattenuator 1 = \n",
      "[+0.500 +0.500 +0.000 +0.000]   \n",
      "[+0.500 +0.500 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      " [180.]\n"
     ]
    }
   ],
   "source": [
    "M1 = Mueller(\"Diattenuator 1\")\n",
    "M1.diattenuator_linear(p1=1, p2=0, azimuth=0*degrees, global_phase=0*degrees)\n",
    "result = 2j * M1\n",
    "print(result, result.global_phase/degrees)\n",
    "\n",
    "result = -1 * M1\n",
    "print(result, result.global_phase/degrees)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Multiplication of a Stokes vector by a Mueller matrix\n",
    "\n",
    "This operation represents a light wave (described by the Stokes vector) getting through an optical element."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Light source = \n",
      "[+1.000]   \n",
      "[+1.000]   \n",
      "[+0.000]   \n",
      "[+0.000]   \n",
      "\n",
      "Diattenuator 1 @ 45.00 deg * Light source = \n",
      "[+0.500]   \n",
      "[+0.000]   \n",
      "[+0.500]   \n",
      "[+0.000]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "S1 = Stokes('Light source')\n",
    "S1.linear_light(azimuth=0)\n",
    "print(S1)\n",
    "M1 = Mueller(\"Diattenuator 1\")\n",
    "M1.diattenuator_perfect(azimuth=45*degrees)\n",
    "print(M1*S1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Multiplication of Mueller matrices\n",
    "\n",
    "When a light wave is going to get through two (or more) optical objects, the total system can be represented by a single Mueller matrix which is the product of the individual Mueller matrices. The left to right order of the matrices must be the last to first object to be transversed.\n",
    "\n",
    "Example: \"circular polarizer\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Retarder 1 @ 45.00 deg * Diattenuator 1 = \n",
      "[+0.500 +0.500 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "[+0.500 +0.500 +0.000 +0.000]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1 = Mueller(\"Diattenuator 1\")\n",
    "M1.diattenuator_perfect(azimuth=0*degrees)\n",
    "M2 = Mueller(\"Retarder 1\")\n",
    "M2.quarter_waveplate(azimuth=45*degrees)\n",
    "print(M2*M1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Equality\n",
    "\n",
    "It is possible to compare two *Mueller* objects and tell if they are the same. It just compares the Mueller matrices and the global phase, not the rest of object fields."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Diattenuator 1 = \n",
      "[+0.500 +0.500 +0.000 +0.000]   \n",
      "[+0.500 +0.500 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "\n",
      "Diattenuator 2 = \n",
      "[+0.500 +0.500 +0.000 +0.000]   \n",
      "[+0.500 +0.500 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "\n",
      "[ True]\n",
      "[False]\n"
     ]
    }
   ],
   "source": [
    "M1 = Mueller(\"Diattenuator 1\")\n",
    "M1.diattenuator_linear(p1=1, p2=0, azimuth=0*degrees, global_phase=0)\n",
    "print(M1)\n",
    "\n",
    "M2 = Mueller(\"Diattenuator 2\")\n",
    "M2.diattenuator_linear(p1=1, p2=0, azimuth=0*degrees, global_phase=0)\n",
    "print(M2)\n",
    "\n",
    "print(M1 == M2)\n",
    "\n",
    "M1.set_global_phase(90*degrees)\n",
    "print(M1 == M2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Operations and multidimensionality\n",
    "\n",
    "The basic operations of *Stokes* objects are subject to the same casting rules as numpy arrays. This means that they can be easily used even if one or both elements of the operation have more than one element.\n",
    "\n",
    "Here are some examples:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Diattenuator 1 + Diattenuator 2 = \n",
      "[+0.900 +0.700 +0.000 +0.000]   [+0.950 +0.750 +0.000 +0.000]   [+1.000 +0.800 +0.000 +0.000]   [+1.050 +0.850 +0.000 +0.000]   [+1.100 +0.900 +0.000 +0.000]   \n",
      "[+0.700 +0.900 +0.000 +0.000]   [+0.750 +0.950 +0.000 +0.000]   [+0.800 +1.000 +0.000 +0.000]   [+0.850 +1.050 +0.000 +0.000]   [+0.900 +1.100 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.346 +0.000]   [+0.000 +0.000 +0.374 +0.000]   [+0.000 +0.000 +0.400 +0.000]   [+0.000 +0.000 +0.424 +0.000]   [+0.000 +0.000 +0.447 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.346]   [+0.000 +0.000 +0.000 +0.374]   [+0.000 +0.000 +0.000 +0.400]   [+0.000 +0.000 +0.000 +0.424]   [+0.000 +0.000 +0.000 +0.447]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# sum\n",
    "M1 = Mueller(\"Diattenuator 1\")\n",
    "M1.diattenuator_linear(p1=1, p2=0, azimuth=0*degrees)\n",
    "M2 = Mueller(\"Diattenuator 2\")\n",
    "M2.diattenuator_linear(Tmax=np.linspace(0.6, 1, 5), Tmin=0.2, azimuth=0*degrees)\n",
    "print(M1+M2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M = \n",
      "[+0.000 +0.000 +0.000 +0.000]   [+0.125 +0.125 +0.000 +0.000]   [+0.250 +0.250 +0.000 +0.000]   [+0.375 +0.375 +0.000 +0.000]   [+0.500 +0.500 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   [+0.125 +0.125 +0.000 +0.000]   [+0.250 +0.250 +0.000 +0.000]   [+0.375 +0.375 +0.000 +0.000]   [+0.500 +0.500 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   [+0.000 +0.000 +0.000 +0.000]   [+0.000 +0.000 +0.000 +0.000]   [+0.000 +0.000 +0.000 +0.000]   [+0.000 +0.000 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   [+0.000 +0.000 +0.000 +0.000]   [+0.000 +0.000 +0.000 +0.000]   [+0.000 +0.000 +0.000 +0.000]   [+0.000 +0.000 +0.000 +0.000]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# product by a constant\n",
    "M1 = Mueller(\"Diattenuator 1\")\n",
    "M1.diattenuator_linear(p1=1, p2=0, azimuth=0*degrees)\n",
    "print(np.linspace(0, 1, 5) * M1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Retarder 1 * Diattenuator 1 = \n",
      "[+0.500 +0.500 +0.000 +0.000]   [+0.500 +0.500 +0.000 +0.000]   [+0.500 +0.500 +0.000 +0.000]   [+0.500 +0.500 +0.000 +0.000]   [+0.500 +0.500 +0.000 +0.000]   \n",
      "[+0.500 +0.500 +0.000 +0.000]   [+0.250 +0.250 +0.000 +0.000]   [+0.000 +0.000 +0.000 +0.000]   [+0.250 +0.250 +0.000 +0.000]   [+0.500 +0.500 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   [+0.250 +0.250 +0.000 +0.000]   [+0.000 +0.000 +0.000 +0.000]   [-0.250 -0.250 +0.000 +0.000]   [-0.000 -0.000 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   [+0.354 +0.354 +0.000 +0.000]   [+0.500 +0.500 +0.000 +0.000]   [+0.354 +0.354 +0.000 +0.000]   [+0.000 +0.000 +0.000 +0.000]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Multiplication of Mueller matrices\n",
    "M1 = Mueller(\"Diattenuator 1\")\n",
    "M1.diattenuator_perfect(azimuth=0*degrees)\n",
    "M2 = Mueller(\"Retarder 1\")\n",
    "angles = np.linspace(0, 90*degrees, 5)\n",
    "M2.quarter_waveplate(azimuth=angles)\n",
    "print(M2*M1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Mueller matrix manipulation\n",
    "\n",
    "There are several operations that can be applied to a Mueller matrix. Some of them are common to all py_pol objects and are inherited from their parent *Py_pol* class:\n",
    "\n",
    "* **clear**:  Removes data and name form Jones vector.\n",
    "* **copy**:  Creates a copy of the Jones_vector object.\n",
    "* **stretch**:  Stretches a Jones vector of size 1.\n",
    "* **shape_like**:  Takes the shape of another object to use as its own.\n",
    "* **reshape**: Changes the shape of the object.\n",
    "* **flatten**:  Transforms N-D objects into 1-D objects (0-D if only 1 element).\n",
    "* **flip**: Flips the object along some dimensions.\n",
    "* **get_list**: Creates a list with single elements.\n",
    "* **from_list**: Creates the object from a list of single elements.\n",
    "* **concatenate**: Canocatenates several objects into a single one.\n",
    "* **draw**: Draws the components of the object.\n",
    "* **clear**: Clears the information of the object.\n",
    "\n",
    "The rest of the manipulation methods are:\n",
    "\n",
    "* **rotate**: Rotates the Mueller matrix.\n",
    "* **sum**: Calculates the summatory of the Jones matrices in the object.\n",
    "* **prod**: Calculates the product of the Jones matrices in the object.\n",
    "* **remove_global_phase**: Removes the phase introduced by the optical element.\n",
    "* **add_global_phase**: Increases the phase introduced by the optical element.\n",
    "* **set_global_phase**: Sets the phase introduced by the optical element.\n",
    "* **reciprocal**: Flips the optical element so the light transverses it in the opposite direction.\n",
    "* **transpose**: Transposes the Mueller matrix of the element.\n",
    "* **inverse**: Calculates the inverse matrix of the Mueller matrix.\n",
    "* **covariant_matrix**: This method calculates the covariant matrix of the Mueller matrix of the object.\n",
    "\n",
    "For a more detailed description of each method, refer to the individual documentation of each one.\n",
    "\n",
    "Example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Object 1 = \n",
      "[+0.500 +0.500 +0.000 +0.000]   \n",
      "[+0.500 +0.500 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      " \n",
      "\n",
      "Object 1 @ 45.00 deg = \n",
      "[+0.500 +0.000 +0.500 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "[+0.500 +0.000 +0.500 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1 = Mueller(\"Object 1\")\n",
    "M1.diattenuator_linear(p1=1, p2=0, azimuth=0*degrees)\n",
    "print(M1,'\\n')\n",
    "\n",
    "M1.rotate(angle=45*degrees)\n",
    "print(M1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Most manipulation methods have the *keep* argument that specifies if the originial object must be preserved or transformed. If *keep* is *True* (default is *False*), a new object is created:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Object 1 = \n",
      "[+0.500 +0.500 +0.000 +0.000]   \n",
      "[+0.500 +0.500 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      " Object 1 @ 45.00 deg = \n",
      "[+0.500 +0.000 +0.500 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "[+0.500 +0.000 +0.500 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "\n",
      "Object 1 @ 45.00 deg = \n",
      "[+0.500 +0.000 +0.500 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "[+0.500 +0.000 +0.500 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      " Object 1 @ 45.00 deg = \n",
      "[+0.500 +0.000 +0.500 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "[+0.500 +0.000 +0.500 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1 = Mueller(\"Object 1\")\n",
    "M1.diattenuator_linear(p1=1, p2=0, azimuth=0*degrees)\n",
    "M2 = M1.rotate(angle=45*degrees, keep=True)\n",
    "print(M1, M2)\n",
    "\n",
    "M2 = M1.rotate(angle=45*degrees, keep=False)\n",
    "print(M1, M2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Picking and setting\n",
    "\n",
    "*Py_pol* objects allow taking elements and changing them through indices like a *numpy.ndarray*.\n",
    "\n",
    "Examples:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original = \n",
      "[+0.464 +0.245 +0.549 +0.430]   [+0.485 +0.096 +0.955 +0.787]   [+0.327 +0.095 +0.278 +0.892]   [+0.098 +0.334 +0.368 +0.457]   [+0.224 +0.148 +0.499 +0.764]   \n",
      "[+0.287 +0.865 +0.349 +0.679]   [+0.850 +0.650 +0.708 +0.186]   [+0.069 +0.119 +0.512 +0.094]   [+0.948 +0.631 +0.402 +0.669]   [+0.756 +0.601 +0.711 +0.705]   \n",
      "[+0.773 +0.631 +0.880 +0.533]   [+0.309 +0.609 +0.528 +0.935]   [+0.675 +0.750 +0.820 +0.500]   [+0.540 +0.814 +0.953 +0.714]   [+0.716 +0.794 +0.572 +0.851]   \n",
      "[+0.738 +0.193 +0.826 +0.098]   [+0.327 +0.322 +0.401 +0.565]   [+0.631 +0.392 +0.402 +0.405]   [+0.573 +0.179 +0.138 +0.944]   [+0.380 +0.726 +0.714 +0.367]   \n",
      "\n",
      "Original_picked = \n",
      "[+0.485 +0.096 +0.955 +0.787]   [+0.327 +0.095 +0.278 +0.892]   \n",
      "[+0.850 +0.650 +0.708 +0.186]   [+0.069 +0.119 +0.512 +0.094]   \n",
      "[+0.309 +0.609 +0.528 +0.935]   [+0.675 +0.750 +0.820 +0.500]   \n",
      "[+0.327 +0.322 +0.401 +0.565]   [+0.631 +0.392 +0.402 +0.405]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "M = np.random.rand(4, 4, 5)\n",
    "M1 = Mueller('Original')\n",
    "M1.from_matrix(M)\n",
    "print(M1)\n",
    "\n",
    "M2 = M1[1:3]\n",
    "print(M2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original M00 =\n",
      " [[0.5 0.5 0.5 0.5 0.5]\n",
      " [0.5 0.5 0.5 0.5 0.5]\n",
      " [0.5 0.5 0.5 0.5 0.5]\n",
      " [0.5 0.5 0.5 0.5 0.5]\n",
      " [0.5 0.5 0.5 0.5 0.5]]\n",
      "Original M01 =\n",
      " [[ 5.00000000e-01  4.82962913e-01  4.33012702e-01  3.53553391e-01\n",
      "   2.50000000e-01]\n",
      " [ 1.29409523e-01  3.06161700e-17 -1.29409523e-01 -2.50000000e-01\n",
      "  -3.53553391e-01]\n",
      " [-4.33012702e-01 -4.82962913e-01 -5.00000000e-01 -4.82962913e-01\n",
      "  -4.33012702e-01]\n",
      " [-3.53553391e-01 -2.50000000e-01 -1.29409523e-01 -9.18485099e-17\n",
      "   1.29409523e-01]\n",
      " [ 2.50000000e-01  3.53553391e-01  4.33012702e-01  4.82962913e-01\n",
      "   5.00000000e-01]]\n",
      "Original M02 =\n",
      " [[ 0.00000000e+00  1.29409523e-01  2.50000000e-01  3.53553391e-01\n",
      "   4.33012702e-01]\n",
      " [ 4.82962913e-01  5.00000000e-01  4.82962913e-01  4.33012702e-01\n",
      "   3.53553391e-01]\n",
      " [ 2.50000000e-01  1.29409523e-01  6.12323400e-17 -1.29409523e-01\n",
      "  -2.50000000e-01]\n",
      " [-3.53553391e-01 -4.33012702e-01 -4.82962913e-01 -5.00000000e-01\n",
      "  -4.82962913e-01]\n",
      " [-4.33012702e-01 -3.53553391e-01 -2.50000000e-01 -1.29409523e-01\n",
      "  -1.22464680e-16]]\n",
      "Original M03 =\n",
      " [[0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]]\n",
      "Original M10 =\n",
      " [[ 5.00000000e-01  4.82962913e-01  4.33012702e-01  3.53553391e-01\n",
      "   2.50000000e-01]\n",
      " [ 1.29409523e-01  3.06161700e-17 -1.29409523e-01 -2.50000000e-01\n",
      "  -3.53553391e-01]\n",
      " [-4.33012702e-01 -4.82962913e-01 -5.00000000e-01 -4.82962913e-01\n",
      "  -4.33012702e-01]\n",
      " [-3.53553391e-01 -2.50000000e-01 -1.29409523e-01 -9.18485099e-17\n",
      "   1.29409523e-01]\n",
      " [ 2.50000000e-01  3.53553391e-01  4.33012702e-01  4.82962913e-01\n",
      "   5.00000000e-01]]\n",
      "Original M11 =\n",
      " [[5.00000000e-01 4.66506351e-01 3.75000000e-01 2.50000000e-01\n",
      "  1.25000000e-01]\n",
      " [3.34936491e-02 1.87469973e-33 3.34936491e-02 1.25000000e-01\n",
      "  2.50000000e-01]\n",
      " [3.75000000e-01 4.66506351e-01 5.00000000e-01 4.66506351e-01\n",
      "  3.75000000e-01]\n",
      " [2.50000000e-01 1.25000000e-01 3.34936491e-02 1.68722976e-32\n",
      "  3.34936491e-02]\n",
      " [1.25000000e-01 2.50000000e-01 3.75000000e-01 4.66506351e-01\n",
      "  5.00000000e-01]]\n",
      "Original M12 =\n",
      " [[ 0.00000000e+00  1.25000000e-01  2.16506351e-01  2.50000000e-01\n",
      "   2.16506351e-01]\n",
      " [ 1.25000000e-01  3.06161700e-17 -1.25000000e-01 -2.16506351e-01\n",
      "  -2.50000000e-01]\n",
      " [-2.16506351e-01 -1.25000000e-01 -6.12323400e-17  1.25000000e-01\n",
      "   2.16506351e-01]\n",
      " [ 2.50000000e-01  2.16506351e-01  1.25000000e-01  9.18485099e-17\n",
      "  -1.25000000e-01]\n",
      " [-2.16506351e-01 -2.50000000e-01 -2.16506351e-01 -1.25000000e-01\n",
      "  -1.22464680e-16]]\n",
      "Original M13 =\n",
      " [[0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]]\n",
      "Original M20 =\n",
      " [[ 0.00000000e+00  1.29409523e-01  2.50000000e-01  3.53553391e-01\n",
      "   4.33012702e-01]\n",
      " [ 4.82962913e-01  5.00000000e-01  4.82962913e-01  4.33012702e-01\n",
      "   3.53553391e-01]\n",
      " [ 2.50000000e-01  1.29409523e-01  6.12323400e-17 -1.29409523e-01\n",
      "  -2.50000000e-01]\n",
      " [-3.53553391e-01 -4.33012702e-01 -4.82962913e-01 -5.00000000e-01\n",
      "  -4.82962913e-01]\n",
      " [-4.33012702e-01 -3.53553391e-01 -2.50000000e-01 -1.29409523e-01\n",
      "  -1.22464680e-16]]\n",
      "Original M21 =\n",
      " [[ 0.00000000e+00  1.25000000e-01  2.16506351e-01  2.50000000e-01\n",
      "   2.16506351e-01]\n",
      " [ 1.25000000e-01  3.06161700e-17 -1.25000000e-01 -2.16506351e-01\n",
      "  -2.50000000e-01]\n",
      " [-2.16506351e-01 -1.25000000e-01 -6.12323400e-17  1.25000000e-01\n",
      "   2.16506351e-01]\n",
      " [ 2.50000000e-01  2.16506351e-01  1.25000000e-01  9.18485099e-17\n",
      "  -1.25000000e-01]\n",
      " [-2.16506351e-01 -2.50000000e-01 -2.16506351e-01 -1.25000000e-01\n",
      "  -1.22464680e-16]]\n",
      "Original M22 =\n",
      " [[0.00000000e+00 3.34936491e-02 1.25000000e-01 2.50000000e-01\n",
      "  3.75000000e-01]\n",
      " [4.66506351e-01 5.00000000e-01 4.66506351e-01 3.75000000e-01\n",
      "  2.50000000e-01]\n",
      " [1.25000000e-01 3.34936491e-02 7.49879891e-33 3.34936491e-02\n",
      "  1.25000000e-01]\n",
      " [2.50000000e-01 3.75000000e-01 4.66506351e-01 5.00000000e-01\n",
      "  4.66506351e-01]\n",
      " [3.75000000e-01 2.50000000e-01 1.25000000e-01 3.34936491e-02\n",
      "  2.99951957e-32]]\n",
      "Original M23 =\n",
      " [[0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]]\n",
      "Original M30 =\n",
      " [[0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]]\n",
      "Original M31 =\n",
      " [[0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]]\n",
      "Original M32 =\n",
      " [[0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]]\n",
      "Original M33 =\n",
      " [[0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]]\n",
      "\n",
      "Original_picked M00 =\n",
      " [[0.5 0.5]\n",
      " [0.5 0.5]]\n",
      "Original_picked M01 =\n",
      " [[-0.12940952 -0.25      ]\n",
      " [-0.5        -0.48296291]]\n",
      "Original_picked M02 =\n",
      " [[ 4.82962913e-01  4.33012702e-01]\n",
      " [ 6.12323400e-17 -1.29409523e-01]]\n",
      "Original_picked M03 =\n",
      " [[0. 0.]\n",
      " [0. 0.]]\n",
      "Original_picked M10 =\n",
      " [[-0.12940952 -0.25      ]\n",
      " [-0.5        -0.48296291]]\n",
      "Original_picked M11 =\n",
      " [[0.03349365 0.125     ]\n",
      " [0.5        0.46650635]]\n",
      "Original_picked M12 =\n",
      " [[-1.25000000e-01 -2.16506351e-01]\n",
      " [-6.12323400e-17  1.25000000e-01]]\n",
      "Original_picked M13 =\n",
      " [[0. 0.]\n",
      " [0. 0.]]\n",
      "Original_picked M20 =\n",
      " [[ 4.82962913e-01  4.33012702e-01]\n",
      " [ 6.12323400e-17 -1.29409523e-01]]\n",
      "Original_picked M21 =\n",
      " [[-1.25000000e-01 -2.16506351e-01]\n",
      " [-6.12323400e-17  1.25000000e-01]]\n",
      "Original_picked M22 =\n",
      " [[4.66506351e-01 3.75000000e-01]\n",
      " [7.49879891e-33 3.34936491e-02]]\n",
      "Original_picked M23 =\n",
      " [[0. 0.]\n",
      " [0. 0.]]\n",
      "Original_picked M30 =\n",
      " [[0. 0.]\n",
      " [0. 0.]]\n",
      "Original_picked M31 =\n",
      " [[0. 0.]\n",
      " [0. 0.]]\n",
      "Original_picked M32 =\n",
      " [[0. 0.]\n",
      " [0. 0.]]\n",
      "Original_picked M33 =\n",
      " [[0. 0.]\n",
      " [0. 0.]]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1 = Mueller('Original')\n",
    "angles = np.linspace(0,180*degrees, 25)\n",
    "M1.diattenuator_perfect(azimuth=angles, shape=[5,5])\n",
    "print(M1)\n",
    "\n",
    "M2 = M1[1:3,2:4]\n",
    "print(M2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Iterating\n",
    "\n",
    "*Py_pol* objects are iterable. When introduced in a for loop, a new object picking in the first dimension is returned."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M_picked = \n",
      "[+0.500 +0.500 +0.000 +0.000]   \n",
      "[+0.500 +0.500 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "\n",
      "M_picked = \n",
      "[+0.500 +0.000 +0.500 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "[+0.500 +0.000 +0.500 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "\n",
      "M_picked = \n",
      "[+0.500 -0.500 +0.000 +0.000]   \n",
      "[-0.500 +0.500 -0.000 +0.000]   \n",
      "[+0.000 -0.000 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "\n",
      "M_picked = \n",
      "[+0.500 -0.000 -0.500 +0.000]   \n",
      "[-0.000 +0.000 +0.000 +0.000]   \n",
      "[-0.500 +0.000 +0.500 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "\n",
      "M_picked = \n",
      "[+0.500 +0.500 -0.000 +0.000]   \n",
      "[+0.500 +0.500 -0.000 +0.000]   \n",
      "[-0.000 -0.000 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.000]   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "angles = np.linspace(0, 180*degrees, 5)\n",
    "Mtotal = Mueller().diattenuator_perfect(azimuth=angles)\n",
    "for M in Mtotal:\n",
    "    print(M)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Parameters of Mueller matrices\n",
    "\n",
    "Several parameters can be measured from a Mueller Matrix. They are implemented in the independent class Parameters_Jones_Matrix, which is stored in the parameters field of Jones_matrix class.\n",
    "\n",
    "* **matrix**:  Gets a numpy array with all the matrices.\n",
    "* **components**: Extracts the four components of the Mueller matrix.\n",
    "* **global_phase**: Extracts the global phase introduced by the object.\n",
    "* **blocks**: Method that divides a mueller matrix in their blocks: mean transmission ($M_{00}$), diattenuation and polarizance vectors and small matrix m.\n",
    "* **diattenuation_vector**: Extracts the 3xN array of diattenuation vectors.\n",
    "* **polarizance_vector**: Extracts the 3xN array of polarizance vectors.\n",
    "* **small_matrix**: Extracts the 3x3xN array of small matrix m.\n",
    "* **retardance_vector**: Extracts the 3xN array of retardance vectors (if exists).\n",
    "* **mean_transmission**: Calculates the mean transmission coefficient.\n",
    "* **transmissions**: Calculates the maximum and minimum transmissions.\n",
    "* **inhomogeneity**: Calculates the inhomogeneity parameter.\n",
    "* **diattenuation**: Calculates the diattenuation of a Mueller matrix.\n",
    "* **diattenuation_linear**: Calculates the linear diattenuation of a Mueller matrix.\n",
    "* **diattenuation_circular**: Calculates the circular diattenuation of a Mueller matrix.\n",
    "* **polarizance**: Calculates the polarizance of a Mueller matrix.\n",
    "* **polarizance_linear**: Calculates the linear polarizance of a Mueller matrix.\n",
    "* **polarizance_circular**: Calculates the delay of the matrix.\n",
    "* **degree_polarizance**: Calculates the degree of polarizance.\n",
    "* **spheric_purity**: Calculates the spheric purity grade.\n",
    "* **retardance**: Calculates the retardance (also refered as delay) of the Mueller matrix of a pure retarder.\n",
    "* **polarimetric_purity**: Calculates the degree of polarimetric purity of a Mueller matrix.\n",
    "* **depolarization_index**: Calculates the depolarization_index of a Mueller matrix.\n",
    "* **polarimetric_purity_indices**: Calculates the polarimetric purity indices of a Mueller matrix.\n",
    "* **eig**: Calculates the eigenvalues and eigenstates (eigenvectors) of the Mueller matrices.\n",
    "* **eigenvalues**: Calculates the eigenvalues and of the Mueller matrices.\n",
    "* **eigenvectors**: Calculates the eigenvectors of the Mueller matrices.\n",
    "* **eigenstates**: Calculates the eigenstates (Stokes vectors of the eigenvectors) of the Mueller matrices.\n",
    "* **det**: Calculates the determinant and of the Mueller matrices.\n",
    "* **trace**: Calculates the trace of the Mueller matrices.\n",
    "* **norm**: Calculates the norm of the Mueller matrices.\n",
    "* **get_all**: Returns a dictionary with all the parameters of the object.\n",
    "\n",
    "For a more detailed description of each method, refer to the individual documentation of each one.\n",
    "\n",
    "Example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Retardance = 90.0ยบ\n"
     ]
    }
   ],
   "source": [
    "M1 = Mueller(\"Diattenuator retarder\")\n",
    "M1.diattenuator_retarder_linear(R=90*degrees, p1=1, p2=0.5)\n",
    "ret = M1.parameters.retardance()\n",
    "print(\"Retardance = {:2.1f}ยบ\".format(ret/degrees))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When several Mueller atrices are stored in the object, setting *verbose* argument to *True* makes the method print the values in screen. Also, 1D or 2D figures can be shown if the *draw* argument is set to *True*:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The retardance of Diattenuator retarder is (deg):\n",
      "90.0\n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1 = Mueller(\"Diattenuator retarder\")\n",
    "M1.diattenuator_retarder_linear(R=90*degrees, p1=1, p2=0.5)\n",
    "ret = M1.parameters.retardance(verbose=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The retardance of Diattenuator retarder is (deg):\n",
      "The mean value is 90.00000000000001 +- 36.18090839619338\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "M1 = Mueller(\"Diattenuator retarder\")\n",
    "ret = np.linspace(0, 180*degrees, 124)\n",
    "M1.diattenuator_retarder_linear(R=ret, p1=1, p2=0.5)\n",
    "ret = M1.parameters.retardance(draw=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The field transmissions of Diattenuator are:\n",
      "The mean value of param Maximum (int.) is 0.75 +- 0.14550631161866215\n",
      "The mean value of param Minimum (int.) is 0.25 +- 0.14550631161866218\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "M1 = Mueller(\"Diattenuator\")\n",
    "p1 = np.linspace(0.5, 1, 124)\n",
    "p2 = np.linspace(0, 0.5, 124)\n",
    "P1, P2 = np.meshgrid(p1, p2)\n",
    "M1.diattenuator_azimuth_ellipticity(p1=P1, p2=P2, azimuth=30*degrees, ellipticity=15*degrees)\n",
    "p1, p2 = M1.parameters.transmissions(kind='Field', draw=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There is a function in Parameters_Mueller class, *get_all* that will compute all the parameters available and stores in a dictionary *dict_params*. Info about dict parameters can be revised using the *print* function.\n",
    "\n",
    "Example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The mean transmission of Diattenuator retarder is:\n",
      "0.625\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The inhomogeneity parameter of Diattenuator retarder is:\n",
      "0.44721359549995804\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The diattenuation of Diattenuator retarder is:\n",
      "0.6\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The linear diattenuation of Diattenuator retarder is:\n",
      "0.6\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The circular diattenuation of Diattenuator retarder is:\n",
      "0.0\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The polarizance of Diattenuator retarder is:\n",
      "0.6\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The linear polarizance of Diattenuator retarder is:\n",
      "0.6\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The circular polarizance of Diattenuator retarder is:\n",
      "0.0\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The degree of spherical purity of Diattenuator retarder is:\n",
      "0.8717797887081348\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The retardance of Diattenuator retarder is (deg):\n",
      "90.0\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The degree of polarimetric purity of Diattenuator retarder is:\n",
      "1.0\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The depolarization index of Diattenuator retarder is:\n",
      "0.0\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The polarimetric purity indices of Diattenuator retarder are:\n",
      "  P1\n",
      "1.0\n",
      "  P2\n",
      "1.0\n",
      "  P3\n",
      "1.0\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The intensity transmissions of Diattenuator retarder are:\n",
      "  Maximum (int.)\n",
      "1.0\n",
      "  Minimum (int.)\n",
      "0.25\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The field transmissions of Diattenuator retarder are:\n",
      "  Maximum (int.)\n",
      "1.0\n",
      "  Minimum (int.)\n",
      "0.5\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The retardance of Diattenuator retarder is (deg):\n",
      "90.0\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The eigenvalues of Diattenuator retarder are:\n",
      "  v1\n",
      "(1+0j)\n",
      "  v2\n",
      "(0.2499999999999999+0j)\n",
      "  v3\n",
      "(3.061616997868383e-17+0.5000000000000001j)\n",
      "  v4\n",
      "(3.061616997868383e-17-0.5000000000000001j)\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The eigenvectors of Diattenuator retarder are:\n",
      "  e1 I\n",
      "[0.70710678+0.j]\n",
      "  e1 Q\n",
      "[0.70710678+0.j]\n",
      "  e1 U\n",
      "[0.+0.j]\n",
      "  e1 V\n",
      "[0.+0.j]\n",
      "  e2 I\n",
      "[-0.70710678+0.j]\n",
      "  e2 Q\n",
      "[0.70710678+0.j]\n",
      "  e2 U\n",
      "[-0.+0.j]\n",
      "  e2 V\n",
      "[-0.+0.j]\n",
      "  e3 I\n",
      "[0.+0.j]\n",
      "  e3 Q\n",
      "[0.+0.j]\n",
      "  e3 U\n",
      "[0.-0.70710678j]\n",
      "  e3 V\n",
      "[0.70710678+0.j]\n",
      "  e4 I\n",
      "[0.-0.j]\n",
      "  e4 Q\n",
      "[0.-0.j]\n",
      "  e4 U\n",
      "[0.+0.70710678j]\n",
      "  e4 V\n",
      "[0.70710678-0.j]\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The determinant of Diattenuator retarder is:\n",
      "0.06249999999999998\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The trace of Diattenuator retarder is:\n",
      "1.25\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "The norm of Diattenuator retarder is:\n",
      "1.25\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1 = Mueller(\"Diattenuator retarder\")\n",
    "M1.diattenuator_retarder_linear(R=90*degrees, p1=1, p2=0.5)\n",
    "print(M1.parameters)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Checks on Mueller Matrices\n",
    "\n",
    "There are many types of Mueller matrices. The Check_Mueller calss implements all the checks that can be performed in order to clasify a Mueller matrix. They are stored in the *checks* field of Mueller class.\n",
    "\n",
    "* **is_physical**:  Conditions of physical realizability.\n",
    "* **is_non_depolarizing / is_pure**: Checks if matrix is non-depolarizing.\n",
    "* **is_homogeneous**: Checks if the matrix is homogeneous (eigenstates are orthogonal). It is implemented in two different ways.\n",
    "* **is_retarder**: Checks if the matrix M corresponds to a pure retarder.\n",
    "* **is_diattenuator / is_polarizer**: Checks if the matrix M corresponds to a pure homogeneous diattenuator.\n",
    "* **is_depolarizer**: Checks if the object corresponds to a depolarizer.\n",
    "* **is_singular**: Checks if the matrix is singular (at least one of its eigenvalues is 0).\n",
    "* **is_symmetric**: Checks if the Mueller matrices are symmetric.\n",
    "* **is_eigenstate**: Checks if a given light state is an eigenstate of the objct.\n",
    "\n",
    "\n",
    "* **get_all**: Returns a dictionary with all the checks of the object.\n",
    "\n",
    "Example: linear diattenuator."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Diattenuator = \n",
      "[+0.625 +0.375 +0.000 +0.000]   \n",
      "[+0.375 +0.625 +0.000 +0.000]   \n",
      "[+0.000 +0.000 +0.500 +0.000]   \n",
      "[+0.000 +0.000 +0.000 +0.500]   \n",
      "\n",
      "The inhomogeneity parameter of Diattenuator is:\n",
      "0.0\n",
      "\n",
      "Diattenuator is physically realizable:\n",
      "True\n",
      "\n",
      "Diattenuator is homogeneous:\n",
      "True\n",
      "\n",
      "Diattenuator is a retarder:\n",
      "False\n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1 = Mueller(\"Diattenuator\")\n",
    "M1.diattenuator_linear(p1=1, p2=0.5)\n",
    "print(M1)\n",
    "\n",
    "M1.parameters.inhomogeneity(verbose=True)\n",
    "\n",
    "c1 = M1.checks.is_physical(verbose=True)\n",
    "c2 = M1.checks.is_homogeneous(verbose=True)\n",
    "c3 = M1.checks.is_retarder(verbose=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1D and 2D plot draws are also implemented for this class:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Diattenuator is a diattenuator:\n",
      "The mean value is 0.9999349635796045 +- 0.008064253881137646\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[ True,  True,  True, ...,  True,  True,  True],\n",
       "       [ True,  True,  True, ...,  True,  True,  True],\n",
       "       [ True,  True,  True, ...,  True,  True,  True],\n",
       "       ...,\n",
       "       [ True,  True,  True, ...,  True,  True,  True],\n",
       "       [ True,  True,  True, ...,  True,  True,  True],\n",
       "       [False,  True,  True, ...,  True,  True,  True]])"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M1 = Mueller(\"Diattenuator\")\n",
    "p1 = np.linspace(0.5, 1, 124)\n",
    "p2 = np.linspace(0, 0.5, 124)\n",
    "P1, P2 = np.meshgrid(p1, p2)\n",
    "M1.diattenuator_linear(p1=P1, p2=P2, azimuth=30*degrees)\n",
    "M1.checks.is_diattenuator(draw=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There is a function in Checks_Mueller class, **.get_all()** that will compute all the checks available and store them in a dictionary **.dict_params()**. Info about dict checks can be revised using the **print** function.\n",
    "\n",
    "Example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Diattenuator is physically realizable:\n",
      "True\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "Diattenuator is pure (non-depolarizing):\n",
      "True\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "Diattenuator is homogeneous:\n",
      "True\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "Diattenuator is a retarder:\n",
      "False\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "Diattenuator is a diattenuator:\n",
      "[ True]\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "Diattenuator is a depolarizer:\n",
      "[False]\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "Diattenuator is singular:\n",
      "False\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "Diattenuator is symmetric:\n",
      "True\n",
      "Low dimensionality, figure not available.\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1 = Mueller(\"Diattenuator\")\n",
    "M1.diattenuator_linear(p1=1, p2=0.5)\n",
    "print(M1.checks)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Analysis of Mueller matrices\n",
    "\n",
    "Several analysis can be performed from a Mueller Matrix. They are implemented in the independent class Analysis_Mueller, which is stored in the *analysis* field of Mueller class.\n",
    "\n",
    "* **diattenuator**: Calculates all the parameters from the Mueller Matrix of a diattenuator.\n",
    "* **polarizer**: Calculates all the parameters from the Mueller Matrix of a diattenuator using the polarizance vector. If the polarizer is homogeneous, this is equivalent to the previous method.\n",
    "* **retarder**: Calculates all the parameters from the Mueller Matrix of a retarder.\n",
    "* **depolarizer**: Calculates some of the parameters from the Mueller matrix of a diattenuator.\n",
    "* **filter_physical_conditions**: Method that filters experimental errors by forcing the Mueller matrix M to fulfill the conditions necessary for a matrix to be physicall.\n",
    "* **filter_purify_number**: Purifies a Mueller matrix by choosing the number of eigenvalues of the covariant matrix that will be made 0.\n",
    "* **filter_purify_threshold**: Purifies a Mueller matrix by making 0 the eigenvalues of the covariant matrix lower than a certain threshold.\n",
    "* **decompose_pure**: Polar decomposition of a pure Mueller matrix in a retarder and a diattenuator.\n",
    "* **decompose_polar**: Polar decomposition of a general Mueller matrix in a depolarizer, retarder and a diattenuator."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Diattenuator = \n",
      "[+0.625 -0.162 +0.094 +0.325]   \n",
      "[-0.162 +0.523 -0.014 -0.047]   \n",
      "[+0.094 -0.014 +0.508 +0.027]   \n",
      "[+0.325 -0.047 +0.027 +0.594]   \n",
      "\n",
      "\n",
      "Analysis of Diattenuator as diattenuator:\n",
      "\n",
      "- Transmissions of Diattenuator are:\n",
      "  Max. transmission\n",
      "1.0\n",
      "  Min. transmission\n",
      "0.25\n",
      "  p1\n",
      "1.0\n",
      "  p2\n",
      "0.5\n",
      "\n",
      "- Angles of Diattenuator are:\n",
      "  Alpha\n",
      "[57.82945314]\n",
      "  Delay\n",
      "[73.89788625]\n",
      "  Azimuth\n",
      "[75.]\n",
      "  Ellipticity angle\n",
      "[30.]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "M1 = Mueller(\"Diattenuator\")\n",
    "M1.diattenuator_azimuth_ellipticity(p1=1, p2=0.5, azimuth=75*degrees, ellipticity=30*degrees)\n",
    "print(M1)\n",
    "M1.analysis.diattenuator(verbose=True);"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
